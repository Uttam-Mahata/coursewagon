name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

env:
  PROJECT_ID: mitra-348d9
  SERVICE_NAME: coursewagon-api
  REGION: us-central1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Only run if it's a push to main OR a merged pull request to main
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check for Python server changes
      id: changes
      run: |
        echo "Force deploy for testing - deploying"
        echo "deploy=true" >> $GITHUB_OUTPUT

    - name: Authenticate to Google Cloud
      if: steps.changes.outputs.deploy == 'true'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Google Cloud SDK
      if: steps.changes.outputs.deploy == 'true'
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for Google Container Registry
      if: steps.changes.outputs.deploy == 'true'
      run: |
        gcloud auth configure-docker gcr.io

    - name: Build Docker image
      if: steps.changes.outputs.deploy == 'true'
      run: |
        cd python-server
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .

    - name: Push Docker image
      if: steps.changes.outputs.deploy == 'true'
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}

    - name: Deploy to Cloud Run
      if: steps.changes.outputs.deploy == 'true'
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image=gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          --platform=managed \
          --region=$REGION \
          --allow-unauthenticated \
          --port=8000 \
          --memory=2Gi \
          --cpu=2 \
          --max-instances=10 \
          --min-instances=0 \
          --timeout=3600 \
          --concurrency=80 \
          --set-env-vars="GOOGLE_APPLICATION_CREDENTIALS=/etc/secrets/gcs-service-account.json,FIREBASE_ADMIN_SDK_PATH=/etc/secrets/firebase-admin-sdk.json" \
          --set-secrets="/etc/secrets/gcs-service-account.json=COURSEWAGON-GCS-SERVICE-ACCOUNT-JSON:latest,/etc/secrets/firebase-admin-sdk.json=COURSEWAGON-FIREBASE-ADMIN-JSON:latest,SECRET_KEY=COURSEWAGON-SECRET-KEY:latest,DB_HOST=COURSEWAGON-MYSQL-HOST:latest,DB_USER=COURSEWAGON-MYSQL-USER:latest,DB_PASS=COURSEWAGON-MYSQL-PASSWORD:latest,DB_NAME=COURSEWAGON-MYSQL-DATABASE:latest,JWT_SECRET_KEY=COURSEWAGON-JWT-SECRET-KEY:latest,MAIL_USERNAME=COURSEWAGON-MAIL-USERNAME:latest,MAIL_PASSWORD=COURSEWAGON-MAIL-PASSWORD:latest,MAIL_SERVER=COURSEWAGON-MAIL-SERVER:latest,MAIL_PORT=COURSEWAGON-MAIL-PORT:latest,GCS_BUCKET_NAME=COURSEWAGON-GCS-BUCKET-NAME:latest,GCP_PROJECT_ID=COURSEWAGON-GCS-PROJECT-ID:latest,AZURE_STORAGE_ACCOUNT_NAME=COURSEWAGON-AZURE-STORAGE-ACCOUNT-NAME:latest,AZURE_STORAGE_CONNECTION_STRING=COURSEWAGON-AZURE-STORAGE-CONNECTION-STRING:latest,AZURE_STORAGE_CONTAINER_NAME=COURSEWAGON-AZURE-CONTAINER-NAME:latest,API_KEY=COURSEWAGON-API-KEY:latest,GEMINI_API_KEY=COURSEWAGON-GEMINI-API-KEY:latest"

    - name: Test health endpoint
      if: steps.changes.outputs.deploy == 'true'
      run: |
        sleep 30
        curl --fail "https://$SERVICE_NAME-$REGION.a.run.app/health"
